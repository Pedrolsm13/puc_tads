\documentclass{article}
\usepackage[utf8]{inputenc}
\usepackage{hyperref}

\title{Relatório do Sistema de Locadora de Veículos}
\author{}
\date{}

\begin{document}

\maketitle

\section{Introdução}

O projeto "Sistema de Locadora de Veículos" foi desenvolvido com o intuito de otimizar a gestão de uma locadora, permitindo o cadastro de veículos, clientes, reservas e vendas. Utilizando tecnologias como C\# 6.0, ASP.NET Core, Entity Framework Core, SQL Server Express e Swagger, o sistema visa centralizar as operações e facilitar o processo de aluguel de veículos.

\section{Requisitos Funcionais}

O sistema foi projetado para oferecer as seguintes funcionalidades:

\subsection{Cadastro de Veículos}
\begin{itemize}
    \item Inclusão de informações como marca, modelo, ano, placa;
    \item Consulta e listagem de veículos cadastrados;
    \item Edição e exclusão de veículos.
\end{itemize}

\subsection{Cadastro de Clientes}
\begin{itemize}
    \item Inclusão de dados pessoais como nome, endereço;
    \item Consulta e listagem de clientes cadastrados;
    \item Edição e exclusão de clientes.
\end{itemize}

\subsection{Gerenciamento de Funcionários}
\begin{itemize}
    \item Nome e Cargo.
\end{itemize}

\subsection{Gerenciamento de Reservas}
\begin{itemize}
    \item Realização de reservas de veículos por clientes;
    \item Consulta e listagem de reservas;
    \item Edição e cancelamento de reservas;
    \item Registro de dados de devolução de veículos.
\end{itemize}

\subsection{Gerenciamento de Vendas}
\begin{itemize}
    \item Registro de aluguel de veículos;
    \item Realização de aluguel de veículos por clientes;
    \item Consulta e listagem de aluguéis;
    \item Edição e cancelamento de aluguéis;
    \item Registro de dados de devolução de veículos.
\end{itemize}

\subsection{Relatórios}
\begin{itemize}
    \item Geração de relatórios de veículos mais alugados, clientes mais frequentes e histórico de reservas.
\end{itemize}

\section{Arquitetura do Sistema}

O sistema segue a arquitetura MVC (Model-View-Controller), dividindo as responsabilidades em camadas:

\begin{itemize}
    \item \textbf{Model}: Contém as classes que representam as entidades do sistema (Veículo, Cliente, Reserva, Venda e Funcionário), além do acesso ao banco de dados via Entity Framework.
    \item \textbf{View}: A camada de apresentação (interface gráfica) seria desenvolvida com o uso de ASP.NET Core, porém neste projeto o foco é a API RESTful.
    \item \textbf{Controller}: Responsável pela lógica de negócio e manipulação de requisições HTTP. Controladores como VeiculosController e ClientesController implementam operações CRUD.
\end{itemize}

\section{Implementação Técnica}

\begin{itemize}
    \item Linguagem de Programação: C\# 7.0
    \item Framework Web: ASP.NET Core
    \item Acesso a Dados: Entity Framework Core
    \item Banco de Dados: SQL Express
    \item Documentação e Testes: Swagger
\end{itemize}

\section{Descrição do Banco de Dados}

O modelo de dados do sistema é composto pelas seguintes entidades:

\subsection{Veículo}
\begin{itemize}
    \item VeiculoId (chave primária)
    \item Marca
    \item Modelo
    \item Ano
    \item Placa
\end{itemize}

\subsection{Cliente}
\begin{itemize}
    \item ClienteId (chave primária)
    \item Nome
    \item Endereço
\end{itemize}

\subsection{Reserva}
\begin{itemize}
    \item ReservaId (chave primária)
    \item VeiculoId (chave estrangeira)
    \item ClienteId (chave estrangeira)
    \item DataReserva
    \item DataDevolucao
\end{itemize}

\subsection{Venda}
\begin{itemize}
    \item VendaId (chave primária)
    \item VeiculoId (chave estrangeira)
    \item ClienteId (chave estrangeira)
    \item FuncionarioId (chave estrangeira)
    \item ValorVenda
    \item DataVenda
\end{itemize}

\subsection{Funcionário}
\begin{itemize}
    \item FuncionarioId (chave primária)
    \item Nome
    \item Cargo
\end{itemize}

\section{Testes e Validação}

Foram realizados testes manuais utilizando o Swagger para verificar o funcionamento dos endpoints. As operações de criação, leitura, atualização e exclusão (CRUD) foram validadas para garantir a consistência dos dados no banco de dados. Os testes incluíram simulações de reservas, vendas e cadastro de clientes.

\section{Resultados e Conclusões}

O sistema atendeu aos requisitos propostos, permitindo a gestão eficaz de uma locadora de veículos. As operações de reserva e venda foram bem-sucedidas, e o controle de clientes e veículos foi devidamente implementado. A API se mostrou robusta e eficiente para o propósito definido.

\section{Considerações Finais}

O desenvolvimento deste sistema permitiu a aplicação prática de conceitos de arquitetura de software e gerenciamento de dados. O uso de tecnologias modernas como ASP.NET Core e Entity Framework proporcionou um desenvolvimento ágil e estruturado. Como melhoria futura, poderia ser implementada uma interface gráfica para operadores da locadora e a inclusão de mais relatórios para análise de dados.

\section{Referências}

\begin{itemize}
    \item \url{https://swagger.io/docs/}
    \item \url{https://learn.microsoft.com/pt-br/ef/}
    \item \url{https://learn.microsoft.com/pt-br/ef/dotnet-data/}
\end{itemize}

\section{Apêndices}

\subsection{Modelo conceitual para o banco de dados}
(ANEXO)

\subsection{Exemplos de Consultas SQL}
\begin{itemize}
    \item Consultar todos os veículos cadastrados:
    \begin{verbatim}
        SELECT * FROM Veiculo;
    \end{verbatim}
    
    \item Consultar os dados de um cliente específico:
    \begin{verbatim}
        SELECT * FROM Cliente WHERE ClienteId = clienteId;
    \end{verbatim}
    
    \item Listar todas as reservas ativas:
    \begin{verbatim}
        SELECT r.*, v.Modelo, c.Nome
        FROM Reserva r
        INNER JOIN Veiculo v ON r.VeiculoId = v.VeiculoId
        INNER JOIN Cliente c ON r.ClienteId = c.ClienteId
        WHERE DataDevolucao IS NULL;
    \end{verbatim}
\end{itemize}

\subsection{Documentação da API Swagger}
(ANEXO)

\end{document}
